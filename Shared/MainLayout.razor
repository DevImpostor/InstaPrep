@inherits LayoutComponentBase
@inject IDialogService DialogService
@using InstaPrep.Data.Scrapers

<MudThemeProvider IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Outlined.SetMeal" Color="Color.Tertiary" OnClick="@((e) => ImportRecipe())" Target="_blank">Import Recipe</MudButton>
        <MudSpacer />
        <MudIconButton Icon="@_darkModeIcon" Color="Color.Inherit" Target="_blank" OnClick="@((e) => DarkModeToggle())" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">InstaPrep</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _isDarkMode = true;

    string _darkModeIcon => (_isDarkMode) ? Icons.Outlined.DarkMode : Icons.Filled.DarkMode;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    void ImportRecipe()
    {

        var dialog = DialogService.Show<ImportDialog>("Import Recipe");

    @*var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            Servers.RemoveAll(item => item.Id == deletedServer);
        }*@
    }
}