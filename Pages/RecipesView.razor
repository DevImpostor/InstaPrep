@using InstaPrep.Data

@page "/recipe/{RecipeId}"
@inject IDataService dataService

<PageTitle>Recipe</PageTitle>

<MudGrid Spacing="4" Justify="Justify.FlexStart">
    @* --- Header --- *@
    <MudItem xs="12" md="6">
        <MudStack>
            <MudPaper Class="pa-4 ma-2" Elevation="4">
                @* --- Title --- *@
                <MudText Typo="Typo.h4">@(CurrentRecipe?.Title ?? "Loading") </MudText>
                @* --- Metrics --- *@
                <MudStack Justify="Justify.SpaceEvenly" Row="true">
                    <MudStack Justify="Justify.SpaceAround" Spacing="0">
                        <MudItem>
                                <MudRating MaxValue="3" SelectedValue="2" />
                            </MudItem>
                    </MudStack>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudStack Justify="Justify.SpaceAround" Spacing="0">
                        <MudItem>
                                <MudChip Icon="@Icons.Filled.GroupWork" Color="Color.Primary">4</MudChip>
                            </MudItem>
                    </MudStack>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudStack Justify="Justify.SpaceAround" Spacing="0">
                        <MudItem>
                                <MudChip Icon="@Icons.Filled.Timelapse" Color="Color.Primary">5 mins</MudChip>
                            </MudItem>
                    </MudStack>
                </MudStack>
                @* --- Photo --- *@
                <MudImage ObjectFit="ObjectFit.Cover"
                          Class="rounded-lg"
                          Src="@CurrentRecipe.ImageUrl"
                          Style="width:100%; height:155px" />
            </MudPaper>
        </MudStack>
    </MudItem>

    @* --- List --- *@
    <MudItem xs="12" md="6">
        <MudStack>
            @* --- Title --- *@
            <MudStack Row="true">
                <MudText Typo="Typo.h4">Ingredients</MudText>
                <MudButton Variant="Variant.Outlined" OnClick="@(() => OpenDrawer(Anchor.End))">Add</MudButton>
            </MudStack>

            <MudDivider DividerType="DividerType.Middle" Class="my-6" />

            <MudList Clickable="false">

                @foreach (var ingredient in CurrentRecipe.IngredientsList)
                {


                    <MudListItem>
                        <MudGrid>
                            @* --- Title --- *@
                            <MudItem xs="4">
                                <MudStack AlignItems="AlignItems.Center" Row="true">
                                    <MudCheckBox Checked="@false"></MudCheckBox>
                                    <MudText>@ingredient.Title</MudText>
                                </MudStack>
                            </MudItem>

                            @* --- Measure --- *@
                            <MudItem xs="4">
                                <MudText>@ingredient.Measure</MudText>
                            </MudItem>

                            @* --- Method --- *@
                            <MudItem xs="4">
                                <MudText Color=Color.Primary>///chopped</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudListItem>
                }

            </MudList>

        </MudStack>
    </MudItem>
    <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Add Ingredient</MudText>
        </MudDrawerHeader>
        <RecipeIngredient OpenAddIngredient="() => CloseDrawer()" />
    </MudDrawer>

</MudGrid>

@code{
  
    [Parameter]
    public string RecipeId { get; set; } = string.Empty;

    private Recipe? CurrentRecipe = null;

    private bool open;
    private Anchor anchor;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
    void CloseDrawer()
    {
        open = false;
        StateHasChanged();

    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(RecipeId is not null)
        {

            var foundRecipe = dataService.GetRecipeById(RecipeId);

            if (foundRecipe is not null)
            {
                CurrentRecipe = foundRecipe;
            }
        }
        else
        {

        }
    }
}